<?php
//  $Id: pg_account.module,v 1.3 2010/11/03 20:10:09 gor Exp $


/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_perm().
 */
function pg_account_perm() {
  return array('administer pg_account', 'has account', 'pg_account operator','allow money withdraw', 'allow add funds');
}

/**
 * Implementation of hook_help().
 */
function pg_account_help($path, $arg) {
  switch ($path) {
    case 'admin/pgdata/pgaccount_settings':
      return t('Replace it with HELP information.');
  }
}


/**
 * Implementation of hook_theme()
 */
function pg_account_theme() {
   return array(
    'pg_account_complete' => array(
      'arguments' => array('t' => array()),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_fail' => array(
      'arguments' => array('t' => array()),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_pending' => array(
      'arguments' => array('t' => array()),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_filters' => array(
      'arguments' => array('form' => NULL),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_account' => array(
      'arguments' => array('data' => NULL),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_operator' => array(
      'arguments' => array('data' => NULL),
      'file' => 'pg_account.theme.inc',
    ),
   );
}


/**
 * Implementation of hook_mail()
 */
function pg_account_mail($key, &$message, $params) {
	$language = $message['language'];
	$variables = user_mail_tokens($params['user'], $language);
	
	if($params['t']){
  	$t=$params['t'];
  	$variables['!txnid'] = $t->txnid;
  	$new_balance= balance_load($t->uid);
  	
  	$format = module_invoke('pg_account', 'pgapi_format_price');
    $formated_price = number_format($new_balance->balance,$format['decimals'],$format['dec_point'],$format['thousands_sep']);
    $formated = theme('pgapi_format_price_plain',$formated_price,$params['payment_method']->symbol,$format['position']);
    
  	$variables['!balance'] = $formated;
	}else{
	  $new_balance= balance_load($params['user']->uid);
  	$format = module_invoke('pg_account', 'pgapi_format_price');
    $formated_price = number_format($new_balance->balance,$format['decimals'],$format['dec_point'],$format['thousands_sep']);
    $formated = theme('pgapi_format_price_plain',$formated_price,$params['payment_method']->symbol,$format['position']);
    
  	$variables['!balance'] = $formated;

	}
	
	if($params['formated_amount']){
	  $variables['!formated_amount'] = $params['formated_amount'];
	}
	if($params['operator']){
	  $variables['!operatorname'] = $params['operator']->name;
	}

	if($params['reason']){
	  $variables['!reason'] = $params['reason'];
	}


	switch($key) {
		case PG_COMPLETED:
				$message['subject'] = t('Balance Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Your Payment #!txnid has been completed.

Current Balance: !balance

Best regards,
!site
", $variables, $language->language);
			break;
    case PG_DENIED:
		case PG_FAILED:
				$message['subject'] = t('Balance Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Your Payment #!txnid has been canceled.

Current Balance: !balance

Best regards,
!site
", $variables, $language->language);
			break;
		case 'withdrawFunds':
				$message['subject'] = t('Balance Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Operator !operatorname withdraw !formated_amount from your balance with comment :
!reason

Your current Balance: !balance

Best regards,
!site
", $variables, $language->language);		
		  break;
		case 'addFunds':
				$message['subject'] = t('Balance Notification from !site', $variables, $language->language);
				$message['body'][] = t("Dear !username
Operator !operatorname added !formated_amount to your balance with comment :
!reason

Your current Balance: !balance

Best regards,
!site
", $variables, $language->language);		
		  break;
		  

	}
}




/**
 * IMenu callback; loads a balance object
 */
function balance_load($uid) {
  $uid=(int)$uid;
  return pg_account_balance_load($uid);
}


/**
 * IMenu callback; loads a txnid object
 */
function pg_txnid_load($txnid) {
  $txnid=(int)$txnid;
  return pg_account_transaction_load($txnid);
}

/**
 * Implementation of hook_user()
 */

function pg_account_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {
    case 'load':
      if(user_access('has account',$user)){
        $balance=pg_account_balance_load($user->uid);
//        $user->balance=round($balance->balance / pg_account_getCurrentRate($user),2);
        $user->balance=$balance->balance;
        $user->balance_currency = pg_account_getCurrentSymbol($user);
      }
      return $user;
    case 'delete':
      db_query('DELETE FROM {pg_account_balance} WHERE uid = %d', $user->uid);
  }
}

function pg_account_profileAccess($account = NULL) {
  global $user;
  if(user_access('has account') && $account->uid == $user->uid){
    return true;
  }
  if($user->uid == 1 or user_access('pg_account operator') or user_access('administer pg_account')){
    return true;
  }
  
  return false;
}

/**
 * Implementation of menu_hook()
 */


function pg_account_menu() {

  $items['user/%user/account'] = array(
      'title'            => 'Website account',
      'page callback'    => 'pg_account_account',
      'page arguments'   => array(1),
      'access callback'  => 'pg_account_profileAccess',
      'access arguments' => array(1),
      'file'             => 'pg_account.admin.inc',
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 31,
  );
  
  $items['admin/pgdata/pgsettings/pgaccount'] = array(
      'title'           => 'Account',
      'description'     => 'Account payment settings.',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_account_settings'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'            => 'pg_account.admin.inc',
      'type'            => MENU_LOCAL_TASK,
  );

  $items['admin/pgdata/pgaccount_settings'] = array(
      'title'           => 'Withdraw settings',
      'description'     => 'Account Balance withdraw settings.',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pgaccount_common'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pg_account'),
      'file'            => 'pg_account.admin.inc',
  );
  
  $items['admin/reports/pgaccount_transactions'] = array(
      'title'            => 'Account transactions',
      'description'      => 'Manage account transaction.',
      'page callback'    => 'pg_account_operator',
      'access callback'  => 'user_access',
      'access arguments' => array('pg_account operator'),
      'file'             => 'pg_account.admin.inc',
  );

  $items['admin/reports/pgaccount_transactions/%pg_txnid/send'] = array(
      'title'            => 'Send money',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pg_account_send',3),
      'access callback'  => 'user_access',
      'access arguments' => array('pg_account operator'),
      'type'             => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
  );
  $items['admin/reports/pgaccount_transactions/%pg_txnid/refund'] = array(
      'title'            => 'Refund money',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pg_account_refund',3),
      'access callback'  => 'user_access',
      'access arguments' => array('pg_account operator'),
      'type'             => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
  );
  $items['admin/reports/pgaccount_transactions/%pg_txnid/cancel'] = array(
      'title'            => 'Cancel transaction',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('pg_account_cancel',3),
      'access callback'  => 'user_access',
      'access arguments' => array('pg_account operator'),
      'type'             => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
  );
    

  $items['payment/pgaccount/%txnid'] = array(
      'title'           => 'Account Balance Payment',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_account_payform',2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );

  $items['pgaccount/complete/%txnid'] = array(
      'title'           => 'Transaction completed successfuly',
      'page callback'   => 'pg_account_complete',
      'page arguments'  => array(2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );
  $items['pgaccount/pending/%txnid'] = array(
      'title'           => 'Transaction in progress',
      'page callback'   => 'pg_account_pending',
      'page arguments'  => array(2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );

  $items['pgaccount/fail/%txnid'] = array(
      'title'           => 'Transaction was failed',
      'page callback'   => 'pg_account_fail',
      'page arguments'  => array(2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );

  
  /* AHAH parts*/
  $items['pgaccount/withdraw_wrapper_js'] = array(
      'title'            => 'Javascript Choice Form',
      'page callback'    => 'pg_account_wrapper_js',
      'page arguments'   => array(2),
      'access arguments' => array('allow money withdraw'),
      'type'             => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
  );  
  
  return $items;
}

/**
 * Implementation of hook_formfilterapi().
 */
 
function pg_account_formfilterapi($op,$session_name,&$a1 = NULL){
  if($op == 'filters'){
    $filters = array();
    switch($session_name){
      case 'pg_account_personal_history';
            $filters['price']= array(
              '#type'  => 'textfield',
              '#title' => t('Amount'),
              '#where' => "abs(t.amount)=abs('%f')",
            );
            $filters['action']= array(
              '#type'  => 'select',
              '#title' => t('Payments'),
              '#where' => "t.amount %s",
              '#options' => array(
                ' > 0' => t('received'),
                ' < 0' => t('sent'),
              ),
            );
          
            $filters['status'] = array(
              '#type'  => 'select',
              '#title' => t('Payment status'),
              '#where' => 't.status = %d',
              '#options' => pgapi_build_status(),
            );
            $filters['worflow_status'] = array(
              '#type'  => 'select',
              '#title' => t('Operation status'),
              '#where' => 't.workflow = %d',
              '#options' => pgapi_build_workflow(),
            );    
          
        break;
      case 'pg_account_operator_history';
            
            $filters['name']= array(
              '#type'  => 'textfield',
              '#title' => t('User'),
              '#where' => "u.name='%s'",
            );
          
            $filters['price']= array(
              '#type'  => 'textfield',
              '#title' => t('Amount'),
              '#where' => "abs(t.amount)=abs('%f')",
            );
            $filters['action']= array(
              '#type'  => 'select',  
              '#title' => t('Payments'),
              '#where' => "t.amount %s",
              '#options' => array(
                ' > 0' => t('received'),
                ' < 0' => t('sent'),
              ),
            );
          
            $filters['status'] = array(
              '#type'  => 'select',  
              '#title' => t('Payment status'),
              '#where' => 't.status = %d',
              '#options' => pgapi_build_status(),
            );
            $filters['worflow_status'] = array(
              '#type'  => 'select',  
              '#title' => t('Operation status'),
              '#where' => 't.workflow = %d',
              '#options' => pgapi_build_workflow(),
            );
        break;
            
    }
    return $filters;
  }
}


/**
 * Implements hook_provideNotice().
 */
 
 
function pg_account_provideNotice($op){
  switch($op){
      case 'settings':
            return array(
              'name' => 'pg_account',
              'title' => t('Balance notifications'),
            );
          break;
  }//switch
}



/********************************************************************
 * Pgapi Gateway Hooks
 ********************************************************************/


function pg_account_pgapi_format_price(){

  $format['decimals']      = variable_get('pg_account_decimal_places', 2);
  $format['dec_point']     = variable_get('pg_account_decimal', '.');
  $format['thousands_sep'] = variable_get('pg_account_thousands', ',');
  $format['position']      = variable_get('pg_account_symbol_position',TRUE);
  $format['rate']          = variable_get('pg_account_rate',1);
  $format['symbol']        = variable_get('pg_account_symbol','$');

  $count=1;
  if(module_exists('locale') ){
    $lang_list = language_list('enabled');
    $count = count($lang_list[1]);
  }

  if($count > 1 ){
    
    $langs=variable_get('pg_account_rates',array());
    $default = language_default();
    
    $cur_lang=$default->language;
    
    global $user;
    $balance=pg_account_balance_load($user->uid);
    
    if($balance->language != ''){
      $cur_lang=$balance->language;
    }
    
    if(isset($langs[$cur_lang])){
      $format['decimals']      = $langs[$cur_lang]['pg_account_decimal_places'];
      $format['dec_point']     = $langs[$cur_lang]['pg_account_decimal'];
      $format['thousands_sep'] = $langs[$cur_lang]['pg_account_thousands'];
      $format['position']      = $langs[$cur_lang]['pg_account_symbol_position'];
      $format['rate']          = $langs[$cur_lang]['pg_account_rate'];
      $format['symbol']        = $langs[$cur_lang]['pg_account_symbol'];
    }
    
  }
  

  return $format;
}

function pg_account_pgapi_gw($op,$a3=NULL,$a4=NULL){
  global $user;
  switch($op){
    case 'display name':
        $ret = t('Payment from Account balance');
      break;
    case 'payment page':
        $ret = url('payment/pgaccount/'.$a3 ,array('absolute' => TRUE));
      break;
    case 'payment gateway info':
        $balance=pg_account_balance_load($user->uid);
        if($a4->type != 'pg_account' && $balance->balance  >= ($a3 * pg_account_getCurrentRate())) {
          $ret['name']=theme('image', drupal_get_path('module','pg_account').'/pg_account.png',t('Balance'),t('Balance'));
          $ret['price']= array(pg_account_getCurrentSymbol() => $a3 * pg_account_getCurrentRate() );
        }
      break;
    case 'get form':
        $t=$a3;
        $form_result = $a4;
        $ret = pg_account_extraform($form_result,$t);
      break; 
    case 'process form':
        $form_result = $a4;
        $t = $a3;
        $t->method='pg_account';
        $balance=pg_account_balance_load($t->uid);
        
        $data = (object)(NULL);
        $data->amount=$t->amount * pg_account_getCurrentRate();
        $data->method=$t->type;
        $data->uid=$t->uid;
        $data->pgapi_txnid=$t->txnid;
        $data->description=$t->description;
        
        if(pg_account_balance_sub($data)){
          $t->status = pgapi_get_status_id('completed');
          pgapi_transaction_save($t);
          return $t;
        }else{
          $t->status = pgapi_get_status_id('failed');
          pgapi_transaction_save($t);
          return $t;
        
        }
        
      break;      
  }
  return $ret;
}

function pg_account_pgapi_transaction($op,$t){
  if($t->method != 'pg_account' && $t->type == 'pg_account'){

    $account=user_load($t->uid);

    $language = user_preferred_language($account);
    $variables = user_mail_tokens($account, $language);
    
  	$balance=pg_account_balance_load($t->uid);
  	$variables['!balance'] = pgapi_format_price('pg_account',$balance->balance,pg_account_getCurrentSymbol($account));
  	$variables['!txnid'] = $t->txnid;
  	  	
    switch($op){
	    case PG_COMPLETED:
	        $tr=$t;
	        //fix it. Get amount from pg_account_transaction by pgapi_txnid
	        $orign = db_fetch_object(db_query("SELECT * FROM {pg_account_transaction} WHERE pgapi_txnid = %d", $t->txnid));
	        
	        //$tr->amount = $t->amount * pg_account_getCurrentRate($user);
	        $tr->amount = $orign->amount;
	        
	        if(pg_account_balance_add($tr)){
            $t->description=t('Add Funds to account via %paymentsystem', array('%paymentsystem' => module_invoke($t->method, 'pgapi_gw','display name')));
            $t->workflow = pgapi_get_workflow_id('completed');
            
            
            $balance=pg_account_balance_load($t->uid);
            $variables['!balance'] = pgapi_format_price('pg_account',$balance->balance,pg_account_getCurrentSymbol($account));
            
            $notice->uid = $t->uid;
            $notice->teaser = t('Balance updated. New balance is !balance', $variables, $language->language);
            $notice->body = t("Dear !username
Your Payment #!txnid has been completed.

Your current Balance: !balance
        ", $variables, $language->language);
            $notice->callback = 'pg_account';
            
            notice_save($notice);
	        }
	      break;
	    case PG_DENIED:
	        $t->workflow = pgapi_get_workflow_id('security violation');
	        $notice->uid = $t->uid;
          $notice->teaser = t('Balance update failed. Current balance is !balance.', $variables, $language->language);
          $notice->body = t("Dear !username
Your Payment #!txnid has been canceled.

Your current Balance: !balance
      ", $variables, $language->language);
          $notice->callback = 'pg_account';
          
          notice_save($notice); 
	      break;
	    case PG_FAILED:
	        $t->workflow = pgapi_get_workflow_id('canceled');
	        $notice->uid = $t->uid;
          $notice->teaser = t('Balance update failed. Current balance is !balance.', $variables, $language->language);
          $notice->body = t("Dear !username
Your Payment #!txnid has been canceled.

Your current Balance: !balance
      ", $variables, $language->language);
          $notice->callback = 'pg_account';
          
          notice_save($notice);
	      break;
	  }//switch
    
  }//if
}

function pg_account_pgapi_callback($t){
  switch($t->status){
    case PG_COMPLETED:
        return 'pgaccount/complete/'.$t->txnid;
    case PG_PENDING:
        return 'pgaccount/pending/'.$t->txnid;     
    default:
        return 'pgaccount/fail/'.$t->txnid;

      break;
  }
}

function pg_account_extraform($form_state,$t){
  $account=user_load($t->uid);
  $form['message'] = array(
    '#type' => 'markup',
    '#value' => t('We will charge !amount from your balance', array ('!amount' => pgapi_format_price('pg_account',$t->amount*pg_account_getCurrentRate(),pg_account_getCurrentSymbol($account)))),// $t->amount * pg_account_getCurrentRate()
  );
  return $form;
}


/********************************************************************
 * PACCOUNT Hooks
 ********************************************************************/


function pg_account_accountTabs($op,&$a3=NULL,$a4=NULL){
  global $user;
  switch($op){
    case 'info':
        //$a3 is $account
        $ret[0] = array (
              'weight' => 0,
              'title' => t('Filter results'),
            );
            
        if($user->uid == $a3->uid){
        
          if(user_access('allow add funds')){
            $ret[1] = array (
                  'weight' => 1,
                  'title' => t('Add funds'),
                );
          }
        
          if(user_access('allow money withdraw')){
            $ret[2] = array (
              'weight' => 2,
              'title' => t('Withdraw'),
            );
          }
        
        }elseif(user_access('pg_account operator',$user)){
            $ret[3] = array (
              'weight' => 1,
              'title' => t('Add funds'),
            );
            $ret[4] = array (
              'weight' => 2,
              'title' => t('Withdraw'),
            );
        
        }
      break;
    case 'get form':
        switch($a3){
          case 0:
              $ret = formfilterapi_getForm('pg_account_personal_history');
            break;
          case 1:
              $ret = drupal_get_form('pg_account_addFunds');
            break;
          case 2:
              if(user_access('allow money withdraw')){
                $ret = drupal_get_form('pg_account_withdraw');
              }
            break;
          case 3:
              $ret = drupal_get_form('pg_account_addFundsByOperator',$a4);
            break;
          case 4:
              $ret = drupal_get_form('pg_account_withdrawByOperator',$a4);
            break;
             
        }
      break; 
  }
  return $ret;
}



function pg_account_operatorTabs($op,&$a3=NULL,$a4=NULL){
  global $user;
  switch($op){
    case 'info':
        //$a3 is $account
        $ret[0] = array (
              'weight' => 0,
              'title' => t('Filter results'),
            );
        $ret[1] = array (
          'weight' => 1,
          'title' => t('Add funds to'),
        );
        $ret[2] = array (
          'weight' => 2,
          'title' => t('Withdraw from'),
        );
      break;
    case 'get form':
        switch($a3){
          case 0:
              $ret = formfilterapi_getForm('pg_account_operator_history');
            break;
          case 1:
              $ret = drupal_get_form('pg_account_addFundsByOperator',$a4);
            break;
          case 2:
              $ret = drupal_get_form('pg_account_withdrawByOperator',$a4);
            break;
             
        }
      break; 
  }
  return $ret;
}


/********************************************************************
 * PACCOUNT API Functions
 ********************************************************************/

function pg_account_getCurrentSymbol($account=0){
  $symbol = variable_get('pg_account_symbol','$');
  $count=1;
  
  if(module_exists('locale') ){
    $lang_list = language_list('enabled');
    $count = count($lang_list[1]);
  }

  if($count > 1 ){
    
    $langs=variable_get('pg_account_rates',array());
    $default = language_default();
    
    $cur_lang=$default->language;
    
    if(empty($account)){
      global $user;
      $account=$user;
    }

    $balance=pg_account_balance_load($account->uid);
    
    if($balance->language != ''){
      $cur_lang=$balance->language;
    }elseif(!empty($account->language)){
      $cur_lang=$account->language;
    }
    
    if(isset($langs[$cur_lang])){
      $symbol = $langs[$cur_lang]['pg_account_symbol'];
    }
  }
  return $symbol;
}

function pg_account_getCurrentRate($account=0){
  $rate = variable_get('pg_account_rate','1.00');
  $count=1;
  
  if(module_exists('locale') ){
    $lang_list = language_list('enabled');
    $count = count($lang_list[1]);
  }

  if($count > 1 ){
    
    $langs=variable_get('pg_account_rates',array());
    $default = language_default();
    
    $cur_lang=$default->language;
    
    if(empty($account)){
      global $user;
      $account=$user;
    }
    $balance=pg_account_balance_load($account->uid);
    
    if($balance->language != ''){
      $cur_lang=$balance->language;
    }elseif(!empty($account->language)){
      $cur_lang=$account->language;
    }
    
    if(isset($langs[$cur_lang])){
      $rate = $langs[$cur_lang]['pg_account_rate'];
    }
  }
  return $rate;
}



function pg_account_build_method(){
 foreach (module_implements('pgaccount_withdraw') as $module) {
    if ($module_name= module_invoke($module, 'pgaccount_withdraw','display name')) {
      $methods[$module]= $module_name;
    }
  }
  return $methods;
}


function pg_account_get_method_name($module) {
  $module_name = module_invoke($module, 'pgaccount_withdraw','display name');
  return $module_name;
}

function pg_account_transaction_load($txid) {
  $t = db_fetch_object(db_query("SELECT * FROM {pg_account_transaction} WHERE txnid = %d", $txid));
  $t->extra = unserialize($t->extra);
  return $t;
}
function pg_account_transaction_save($t) {
  $t->extra=serialize($t->extra);
  
  if($t->txnid){
    drupal_write_record('pg_account_transaction', $t,'txnid');
  }else{
    drupal_write_record('pg_account_transaction', $t);
  }
}

function pg_account_balance_add($t) {
  if($t->workflow != PG_WORKFLOW_COMPLETED){
    $b=pg_account_balance_load($t->uid);
    $amount = $t->amount;
    
    
    if($b->norecord){
      $b->balance = $amount;
      $b->uid=$t->uid;

      global $language;
      $account = user_load($t->uid);
      $b->language = $account->language ? $account->language : $language->language;
    
    
      drupal_write_record('pg_account_balance', $b);
    }else{
      $b->balance = $b->balance + $amount;
      drupal_write_record('pg_account_balance', $b, 'uid');
    }
    
    if(!empty($t->txnid)){
      $pgaccount_t=db_fetch_object(db_query('SELECT * FROM {pg_account_transaction} WHERE pgapi_txnid = %d',$t->txnid));
    }
    if(empty($pgaccount_t)){
      //insert new
      $pgaccount_t=(object)$t;
      unset($pgaccount_t->txnid);
      $pgaccount_t->amount = $amount;
      $pgaccount_t->created=time();
      $pgaccount_t->changed=time();
      pg_account_transaction_save($pgaccount_t);
    }
    
    //update old
    $pgaccount_t->status=PG_COMPLETED;
    $pgaccount_t->workflow=PG_WORKFLOW_COMPLETED;
    pg_account_transaction_save($pgaccount_t);
    
	  module_invoke_all('pgaccount_newBalance', 'add',$b);
    
    return true;
  }
  
  return false;
}

function pg_account_balance_sub($values) {
  $values=(object)$values;
  
  $sub=abs($values->amount);
  $b=pg_account_balance_load($values->uid);
  
  if($b->balance >=$sub) {

    $b->balance = $b->balance - $sub;
    
    drupal_write_record('pg_account_balance', $b, 'uid');
    
    $values->amount = (0- $sub);
    
    if(empty($values->status))
      $values->status=PG_RECEIVED;
      
    if(empty($values->workflow))
      $values->workflow=PG_WORKFLOW_RECEIVED;
      
    $values->created=time();
    $values->changed=time();
    pg_account_transaction_save($values);
	  module_invoke_all('pgaccount_newBalance', 'sub',$b);

    return true;
    
  } 
  
  return false;
}

function pg_account_getActiveMoneyOutMethod(){
  $options=array();
  $pgaccount_withdraw=variable_get('pgaccount_withdraw',array());
  foreach (module_implements('pgaccount_withdraw') as $module) {
    if ($module_name= module_invoke($module, 'pgaccount_withdraw','display name')) {
      if($pgaccount_withdraw[$module]){
        $options[$module] = $module_name;        
      }
    }
  }
  return $options;

}

/********************************************************************
 * Other Functions
 ********************************************************************/

function pg_account_addFundsByOperator(&$form_state,$account){

  if(!empty($account)){
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $account->uid,
    );
  }else{
    $options=array();
    $result = db_query('SELECT u.uid,name,balance FROM {users} u LEFT JOIN {pg_account_balance} b ON b.uid= u.uid WHERE u.uid > 0');
    while($account = db_fetch_object($result)){
      $options[$account->uid]= $account->name.' '.pgapi_format_price_plain('pg_account',$account->balance,pg_account_getCurrentSymbol($account));
    }
    
    $form['uid'] = array(
      '#type' => 'select',
      '#title' => t('User'),
      '#options' => $options,
    );  
  
  }


  $form['amount'] = array(
    '#type'  => 'textfield',
    '#title' => t('Amount'),
    '#required'  => TRUE,
  );
  
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#required'  => TRUE,
  );
    
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Continue'),
  );
  return $form;

}

function pg_account_addFundsByOperator_validate($form, &$form_state) {
  global $user;

  if($form_state['values']['amount']<=0){
    form_set_error('amount', t('Amount must be more than 0.'));
  }
  
}

function pg_account_addFundsByOperator_submit($form, &$form_state){
  global $user;

  $data = (object)(NULL);
  $data->amount=$form_state['values']['amount'];
  $data->method='manual';
  $data->description=$form_state['values']['description']."\n".t('Processed by !user',array('!user'=>theme('username',$user)));
  
  
  $data->uid=$form_state['values']['uid'];
  
  $account=user_load($data->uid);
  
  if(pg_account_balance_add($data)){
    drupal_set_message(t('You added !formated_amount to !user account.',array('!user' => theme('username',$account),'!formated_amount'=>pgapi_format_price('pg_account',$form_state['values']['amount'],pg_account_getCurrentSymbol($account) ))));
    
    $language = user_preferred_language($account);
    $variables = user_mail_tokens($account, $language);
    
    $variables['!formated_amount'] =  pgapi_format_price_plain('pg_account',$form_state['values']['amount'],pg_account_getCurrentSymbol($account) );
  	$variables['!operatorname'] = $user->name;
  	$variables['!reason'] = $form_state['values']['description'];
  	
  	$balance=pg_account_balance_load($account->uid);
  	$variables['!balance'] = pgapi_format_price('pg_account',$balance->balance,pg_account_getCurrentSymbol($account));
  	
  	  	
    $notice->uid = $account->uid;
    $notice->teaser = t('Balance updated by !operatorname. New balance is !balance', $variables, $language->language);
    $notice->body = t("Dear !username
Operator !operatorname added !formated_amount to your balance with comment :
!reason

Your current Balance: !balance
", $variables, $language->language);
    $notice->callback = 'pg_account';
    
    notice_save($notice);
    
    $admin_uid=variable_get('pg_account_admin_uid','1');
    if(!empty($admin_uid)){
      //notify admin about balance update
      $noticeadmin->uid=$admin_uid;
      $noticeadmin->teaser = t('Add !formated_amount funds to !username by !operatorname', $variables, $language->language);
      $noticeadmin->body = t("Operator !operatorname added !formated_amount to !username balance with comment :
  !reason
  
  New balance is: !balance
  ", $variables, $language->language);
      $noticeadmin->callback = 'pg_account';
      notice_save($noticeadmin);
    }    
  }
}


function pg_account_withdrawByOperator(&$form_state,$account){
  if(!empty($account)){
    $form['uid'] = array(
      '#type' => 'hidden',
      '#value' => $account->uid,
    );
  }else{
    $options=array();
    $result = db_query('SELECT u.uid,name,balance FROM {users} u LEFT JOIN {pg_account_balance} b ON b.uid= u.uid WHERE u.uid > 0');
    while($account = db_fetch_object($result)){
      $options[$account->uid]= $account->name.' '.pgapi_format_price_plain('pg_account',$account->balance,pg_account_getCurrentSymbol($account));
    }
    
    $form['uid'] = array(
      '#type' => 'select',
      '#title' => t('User'),
      '#options' => $options,
    );  
  
  }
  
  $form['amount'] = array(
    '#type'  => 'textfield',
    '#title' => t('Amount'),
    '#required'  => TRUE,
  );
  
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#required'  => TRUE,
  );
    
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Continue'),
  );
  return $form;

}

function pg_account_withdrawByOperator_validate($form, &$form_state) {
  global $user;
  $balance = pg_account_balance_load($form_state['values']['uid']);

  if($form_state['values']['amount']<=0){
    form_set_error('amount', t('Amount must be more than 0.'));
  }
  
  if($form_state['values']['amount'] > $balance->balance) {
    form_set_error('amount', t('You tried to withdraw !formated_amount. You cannot withdraw more than !formated_balance.', array('!formated_balance' => pgapi_format_price('pg_account',$balance->balance,pg_account_getCurrentSymbol($account) ), '!formated_amount'=>pgapi_format_price('pg_account',$form_state['values']['amount'],pg_account_getCurrentSymbol($account) ))));
  }
}

function pg_account_withdrawByOperator_submit($form, &$form_state){
  global $user;

  $data = (object)(NULL);
  $data->amount=$form_state['values']['amount'];
  $data->method='manual';
  $data->description=$form_state['values']['description']."\n".t('Processed by !user',array('!user'=>theme('username',$user)));
  $data->status=PG_COMPLETED;
  $data->workflow=PG_WORKFLOW_COMPLETED;
  
  $data->uid=$form_state['values']['uid'];
  
  $account=user_load($data->uid);
  
  if(pg_account_balance_sub($data)){
    drupal_set_message(t('You withdraw !formated_amount from !user account.',array('!formated_amount'=>pgapi_format_price('pg_account',$form_state['values']['amount'],pg_account_getCurrentSymbol($account) ), '!user' => theme('username',$account))));

    $language = user_preferred_language($account);
    $variables = user_mail_tokens($account, $language);
    
    $variables['!formated_amount'] =  pgapi_format_price_plain('pg_account',$form_state['values']['amount'],pg_account_getCurrentSymbol($account) );
  	$variables['!operatorname'] = $user->name;
  	$variables['!reason'] = $form_state['values']['description'];
  	
  	$balance=pg_account_balance_load($account->uid);
  	$variables['!balance'] = pgapi_format_price('pg_account',$balance->balance,pg_account_getCurrentSymbol($account));
  	
  	  	
    $notice->uid = $account->uid;
    $notice->teaser = t('Balance updated by !operatorname. New balance is !balance', $variables, $language->language);
    $notice->body = t("Dear !username
Operator !operatorname withdraw !formated_amount from your balance with comment :
!reason

Your current Balance: !balance
", $variables, $language->language);
    $notice->callback = 'pg_account';
    
    notice_save($notice);
    
    $admin_uid=variable_get('pg_account_admin_uid','1');
    if(!empty($admin_uid)){
      //notify admin about balance update
      $noticeadmin->uid=$admin_uid;
      $noticeadmin->teaser = t('Withdraw !formated_amount funds from !username by !operatorname', $variables, $language->language);
      $noticeadmin->body = t("Operator !operatorname withdraw !formated_amount from !username balance with comment :
  !reason
  
  New balance is: !balance
  ", $variables, $language->language);
      $noticeadmin->callback = 'pg_account';
      notice_save($noticeadmin);
    } 
    
  }else{
    drupal_set_message(t('We could not process your request.%user doesn\'t have enough money.', array( '%user' => theme('username',$account))));
  }

}

function _pg_account_fixAmount($amount){
  $amount = str_replace(",", '.', $amount);
  $amount = preg_replace("/[^0-9.]/", '', $amount);
  
  return $amount;
}
 

function pg_account_addFunds(&$form_state){
  if(is_object($form_state['t'])){
    $form = pgapi_payment($form_state,$form_state['t']);
    $form['#theme'] = 'pgapi_payment';
    $form['#submit'] = array('pgapi_payment_submit');
  }else{
    $form['amount'] = array(
      '#type'  => 'textfield',
      '#title' => t('Amount (!currency)',array('!currency'=>pg_account_getCurrentSymbol())),
      '#required'  => TRUE,
    );
    
    $form['submit'] = array(
      '#type'  => 'submit',
      '#value' => t('Continue'),
    );
    $form['#submit'] = array('pg_account_addFunds_submit');
  }
  return $form;
}

function pg_account_addFunds_validate($form, &$form_state) {
  if(!isset($form_state['values']['txnid']) && $form_state['values']['amount'] < 0.01){
    form_set_error('amount', t('Amount must be more than 0.009 .'));
  }
}

function pg_account_addFunds_submit($form, &$form_state){
  global $user;
  if(empty($form_state['values']['txnid'])){
    $t = (object)(NULL);
    $amount = _pg_account_fixAmount($form_state['values']['amount']);
    
    $t->amount=$amount / pg_account_getCurrentRate();
    $t->type='pg_account';
    $t->uid=$user->uid;
    $t->title=t('Add Funds to account for !user',array('!user' => $user->name));
    $t->description=t('Add Funds to account for !user',array('!user' => $user->name));
    $t = pgapi_transaction_save($t);
    
    //the same to pg_account_transaction
    $taccount = (object)(NULL);
    $taccount->amount=$amount; //withdraw spuppost to be less than 0
    $taccount->method='';
    $taccount->uid=$user->uid;
    $taccount->status=PG_PENDING;
    $taccount->workflow=PG_WORKFLOW_RECEIVED;
    $taccount->created=time();
    $taccount->changed=time();
    $taccount->pgapi_txnid = $t->txnid;
    pg_account_transaction_save($taccount);
    
    $form_state['t'] = $t;
    $form_state['rebuild'] = TRUE;
  }else{
    
    unset($form_state['t']);
    $form_state['rebuild'] = TRUE;
  }
}

function pg_account_withdraw(&$form_state){
  $options=pg_account_getActiveMoneyOutMethod();
  if(!empty($options)){
    $default_method = key($options);
	  $form['amount'] = array(
	    '#type'  => 'textfield',
	    '#title' => t('Amount (!currency)',array('!currency'=>pg_account_getCurrentSymbol())),
      '#required'  => TRUE,
	  );
	  
	  $form['method'] = array(
	    '#title'   => t('Transfer to'),
	    '#type'    => 'select',
	    '#options' => $options,
	    '#ahah' => array(
        'path'    => 'pgaccount/withdraw_wrapper_js',
        'wrapper' => 'moneyout-wrapper-process',
        'method'  => 'replace',
        'effect'  => 'slide',
       ),
	  );
	  
	  $form['method_details'] = array(
	    '#tree'  => true,
      '#prefix' => '<div id="moneyout-wrapper-process">',
      '#suffix' => '</div>',
	  );
	  
  	if(!empty($default_method)){
      $extra_form=module_invoke($default_method, 'pgaccount_withdraw','get form', $form_state);
      if(is_array($extra_form)){
        $form['method_details'] += $extra_form;
      }
    } 
  
	  $form['submit'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Continue'),
	  );
  }else{
    //if has access 'administer pg_account'
    if (user_access('administer pg_account')) {
      $message= t('No one money widthdraw method enabled. Go to !link and enable it.',array('!link' => l(t('Withdraw settings'),'admin/pgdata/pgaccount_settings')));
    }else{
      $site_mail =variable_get('site_mail', ini_get('sendmail_from'));
      $message= t('Please send mail to !site_mail to enable money withdraw for your account.',array( '!site_mail' => '<a href="mailto:' . $site_mail . '">' . $site_mail . '</a>'));
    } 
	  $form['message'] = array(
	    '#type'  => 'markup',
	    '#value' => $message,
	  );
  }
  return $form;
}


function pg_account_withdraw_validate($form, &$form_state) {
  global $user;
  $balance = pg_account_balance_load($user->uid);

  if($form_state['values']['amount']< 0.01){
    form_set_error('amount', t('Amount must be more than 0.'));
  }
  
  if($form_state['values']['amount'] > $balance->balance) {
    form_set_error('amount', t('You tried to withdraw !formated_amount. You cannot withdraw more than !formated_balance.', array('!formated_balance'=>pgapi_format_price('pg_account',$balance->balance,pg_account_getCurrentSymbol($user) ),'!formated_amount'=>pgapi_format_price('pg_account',$form_state['values']['amount'],pg_account_getCurrentSymbol($user) ))));
  }
}

function pg_account_withdraw_submit($form, &$form_state){
  global $user;

  $data = (object)(NULL);
  $data->amount=$form_state['values']['amount'];
  $data->method=$form_state['values']['method'];
  $data->extra=$form_state['values']['method_details'];
  $data->uid=$user->uid;
  
  if(pg_account_balance_sub($data)){
    drupal_set_message(t('Our operators will process your request shortly.'));
  }else{
    drupal_set_message(t('We could not process your request.You don\'t have enough money.'));
  }

}

function pg_account_balance_load($uid) {
  $balance = db_fetch_object(db_query("SELECT * FROM {pg_account_balance} WHERE uid = '%d'", $uid));
  if(empty($balance)){
    $balance->uid=$uid;
    $balance->balance = 0;
    $balance->norecord =true;
  }
  return $balance;
}

function pg_account_balance_value($uid) {
  $balance = db_fetch_object(db_query("SELECT * FROM {pg_account_balance} WHERE uid = '%d'", $uid));
  if ($balance) return $balance->balance;
  return 0;
}

function pg_account_balance_save($uid,$balance) {
  db_query("DELETE FROM {pg_account_balance} WHERE uid = '%d'", $uid);
  $b->uid=$uid;
  $b->balance=$balance;
  drupal_write_record('pg_account_balance', $b);

  return $balance;
}

function pg_account_process_oldtransaction($uid=0){
  if($uid==0){
    $result=db_query('SELECT * FROM {pg_account_transaction} WHERE status = %d',PG_PENDING);
  }else{
    $result=db_query('SELECT * FROM {pg_account_transaction} WHERE status = %d AND uid = %d',PG_PENDING, $uid);
  }
  while($t = db_fetch_object($result)) {

    //cancel orders with no payment more that 7 days
    $remove=86400*7;
    if( $t->status == PG_PENDING && $t->created < time()-$remove){
    
      $t->status = PG_CANCELED;
      $t->status = pgapi_get_status_id('canceled');
      $t->workflow = pgapi_get_workflow_id('canceled');
      $t->description = t('Transaction marked canceled due no payment for more than 7 days');
      pg_account_transaction_save($t);
      watchdog('billing', 'set status canceled for account transaction !txnid ', array('!txnid' => $t->txnid), WATCHDOG_NOTICE);
      
    }
  } 
}