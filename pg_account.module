<?php
/**
 * Constants.
 */

define('PG_ACCOUNT_ADD_BALANCE','add');
define('PG_ACCOUNT_SUB_BALANCE','sub');

define('PG_ACCOUNT_ADD_BALANCE_ADMIN_TITLE', 'Balance for [pg_account:username] changed by [pg_account:operatorname]. Added [pg_account:amount]. New balance is [pg_account:balance]');
define('PG_ACCOUNT_ADD_BALANCE_ADMIN_MESSAGE', 'User: [pg_account:username]
Operator: [pg_account:operatorname]
Added: [pg_account:amount]
Balance: [pg_account:balance]

Provided description: [pg_account:description]
[site:url]');

define('PG_ACCOUNT_SUB_BALANCE_ADMIN_TITLE', 'Balance for [pg_account:username] changed by [pg_account:operatorname]. Withdraw [pg_account:amount]. New balance is [pg_account:balance]');
define('PG_ACCOUNT_SUB_BALANCE_ADMIN_MESSAGE', 'User: [pg_account:username]
Operator: [pg_account:operatorname]
Withdraw: [pg_account:amount]
Balance: [pg_account:balance]

Provided description: [pg_account:description]
[site:url]');


define('PG_ACCOUNT_ADD_BALANCE_USER_TITLE', 'Your Balance changed on [pg_account:amount]. New balance is [pg_account:balance]');
define('PG_ACCOUNT_ADD_BALANCE_USER_MESSAGE', 'Dear [pg_account:username]!
We added [pg_account:amount] on your balance.
Your new balance is [pg_account:balance].

This transaction related to: [pg_account:description]
[site:url]');

define('PG_ACCOUNT_SUB_BALANCE_USER_TITLE', 'Your Balance changed on [pg_account:amount]. New balance is [pg_account:balance]');
define('PG_ACCOUNT_SUB_BALANCE_USER_MESSAGE', 'Dear [pg_account:username]!
We withdraw [pg_account:amount] from your balance.
Your new balance is [pg_account:balance].

This transaction related to: [pg_account:description]
[site:url]');

define('PG_ACCOUNT_SEND_BALANCE_USER_TITLE', 'Your Balance changed on [pg_account:amount]. New balance is [pg_account:balance]');
define('PG_ACCOUNT_SEND_BALANCE_USER_MESSAGE', 'Dear [pg_account:username]!
We transfered [pg_account:amount] from your balance to [pg_account:username_received]
Your new balance is [pg_account:balance].

This transaction related to: [pg_account:description]
[site:url]');

define('PG_ACCOUNT_RECEIVE_BALANCE_USER_TITLE', 'Your Balance changed on [pg_account:amount]. New balance is [pg_account:balance]');
define('PG_ACCOUNT_RECEIVE_BALANCE_USER_MESSAGE', 'Dear [pg_account:username_received]!
We transfered [pg_account:amount] from [pg_account:username] to your balance.
Your new balance is [pg_account:balance].

This transaction related to: [pg_account:description]
[site:url]');


/**
 * Implementation of hook_cron()
 */

function pg_account_cron(){
  pg_account_process_oldtransaction();
}

/**
 * Implements hook_permission().
 */
function pg_account_permission() {
  // Add permission to admin pgapi.
  return array(
    'administer pg_account' => array(
      'title' => t('Administer pg_account'),
      'description' => t('NEED TO REPLACE'),
      'restrict access' => TRUE,
    ),
    'pg_account balance' => array(
      'title' => t('Balance'),
      'description' => t('User pg_account balance'),
      'restrict access' => TRUE,
    ),
    'pg_account operator' => array(
      'title' => t('Operator'),
      'description' => t('User can add or withdraw funds from user balance'),
      'restrict access' => TRUE,
    ),
    'pg_account send money' => array(
      'title' => t('Send money'),
      'description' => t('User can send money to another user'),
      'restrict access' => TRUE,
    ),
  );
}


/**
 * Implements hook_theme()
 */
function pg_account_theme() {
  return array(
    'pg_account_complete' => array(
      'arguments' => array('t' => array()),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_fail' => array(
      'arguments' => array('t' => array()),
      'file' => 'pg_account.theme.inc',
    ),
    'pg_account_pending' => array(
      'arguments' => array('t' => array()),
      'file' => 'pg_account.theme.inc',
    ),
    'user_balance' => array(
      'arguments' => array('balance' => array()),
      'file' => 'pg_account.theme.inc',
    )
  );
}

/**
 * IMenu callback; loads a balance object
 */
function balance_load($uid) {
  $uid=(int)$uid;
  return pg_account_balance_load($uid);
}

/**
 * Implements hook_user()
 */

function pg_account_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {
    case 'load':
      if(user_access('pg_account balance',$user)){
        $balance=pg_account_balance_load($user->uid);
        $user->balance = $balance->balance;
      }
      return $user;
    case 'delete':
      db_query('DELETE FROM {pg_account_balance} WHERE uid = %d', $user->uid);
  }
}

function pg_account_profileAccess($account = NULL) {
  global $user;
  if(user_access('pg_account balance') && $account->uid == $user->uid){
    return true;
  }
  if($user->uid == 1 or user_access('pg_account operator') or user_access('administer pg_account')){
    return true;
  }
  
  return false;
}

/**
 * Implements menu_hook()
 */


function pg_account_menu() {

  $items['user/%user/balance'] = array(
      'title'            => 'User balance',
      'page callback'    => 'pg_account_personal_history',
      'page arguments'   => array(1),
      'access callback'  => 'pg_account_profileAccess',
      'access arguments' => array(1),
      'file'             => 'pg_account.user.inc',
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 31,
  );

  $items['user/%user/balance/history'] = array(
      'title'            => 'Transactions history',
      'page callback'    => 'pg_account_personal_history',
      'page arguments'   => array(1),
      'access callback'  => 'pg_account_profileAccess',
      'access arguments' => array(1),
      'file'             => 'pg_account.user.inc',
      'type'             => MENU_DEFAULT_LOCAL_TASK,
      'weight'           => 0,
  );

  $items['user/%user/balance/add'] = array(
      'title'            => 'Add Funds',
      'page callback'    => 'pg_account_account_add',
      'page arguments'   => array(1),
      'access callback'  => 'pg_account_profileAccess',
      'access arguments' => array(1),
      'file'             => 'pg_account.user.inc',
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 1,
  );
  $items['user/%user/balance/withdraw'] = array(
      'title'            => 'Withdraw',
      'page callback'    => 'pg_account_account_withdraw',
      'page arguments'   => array(1),
      'access arguments' => array('pg_account operator'),
      'file'             => 'pg_account.user.inc',
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 2,
  );

  $items['user/%user/balance/send'] = array(
      'title'            => 'Send money',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_account_account_send', 1),
      'access arguments' => array('pg_account send money'),
      'file'             => 'pg_account.user.inc',
      'type'             => MENU_LOCAL_TASK,
      'weight'           => 2,
  );

  
  $items['admin/config/pgapi/gateway_settings/pgaccount'] = array(
      'title'           => 'Account',
      'description'     => 'Account payment settings.',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_account_settings'),
      'access callback' => 'user_access',
      'access arguments' => array('administer pgapi'),
      'file'            => 'pg_account.admin.inc',
      'type'            => MENU_LOCAL_TASK,
      'weight'          => 0,
  );

  $items['admin/reports/pgaccount_transactions'] = array(
      'title'            => 'Account transactions',
      'description'      => 'Manage account transaction.',
      'page callback'    => 'pg_account_history',
      'access callback'  => 'user_access',
      'access arguments' => array('pg_account operator'),
      'file'             => 'pg_account.admin.inc',
  );


  $items['payment/pgaccount/%txnid'] = array(
      'title'           => 'Account Balance Payment',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('pg_account_payform',2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );

  $items['pgaccount/complete/%txnid'] = array(
      'title'           => 'Transaction completed successfuly',
      'page callback'   => 'pg_account_complete',
      'page arguments'  => array(2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );
  $items['pgaccount/pending/%txnid'] = array(
      'title'           => 'Transaction in progress',
      'page callback'   => 'pg_account_pending',
      'page arguments'  => array(2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );

  $items['pgaccount/fail/%txnid'] = array(
      'title'           => 'Transaction was failed',
      'page callback'   => 'pg_account_fail',
      'page arguments'  => array(2),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'             => 'pg_account.admin.inc',
    );
  
  return $items;
}

/**
 * Implements hook_formfilterapi().
 */
 
function pg_account_formfilterapi($op,$session_name,&$a1 = NULL){
  if($op == 'filters'){
    $filters = array();
    switch($session_name){
      case 'pg_account_personal_history';
            $filters['price']= array(
              '#type'  => 'textfield',
              '#title' => t('Amount'),
              '#where' => "pgt.amount",
            );
            $filters['action']= array(
              '#type'  => 'select',
              '#title' => t('Payments'),
              '#where' => array('operation' => "pgt.amount"),
              '#options' => array(
                '> 0' => t('received'),
                '< 0' => t('sent'),
              ),
            );
          
            $filters['status'] = array(
              '#type'  => 'select',
              '#title' => t('Payment status'),
              '#where' => 'pgt.status',
              '#options' => pgapi_build_status(),
            );          
        break;
      case 'pg_account_operator_history';
            
            $filters['name']= array(
              '#type'  => 'textfield',
              '#title' => t('User'),
              '#where' => "u.name",
            );
          
            $filters['price']= array(
              '#type'  => 'textfield',
              '#title' => t('Amount'),
              '#where' => "pgt.amount",
            );
            $filters['action']= array(
              '#type'  => 'select',
              '#title' => t('Payments'),
              '#where' => array('operation' => "pgt.amount"),
              '#options' => array(
                '> 0' => t('received'),
                '< 0' => t('sent'),
              ),
            );
          
            $filters['status'] = array(
              '#type'  => 'select',
              '#title' => t('Payment status'),
              '#where' => 'pgt.status',
              '#options' => pgapi_build_status(),
            );          

        break;
            
    }
    return $filters;
  }
}


/**
 * Implements hook_provideNotice().
 */
 
 
function pg_account_provideNotice($op){
  switch($op){
      case 'settings':
            return array(
              'name' => 'pg_account',
              'title' => t('Balance notifications'),
            );
          break;
  }//switch
}



/*
 * Implements hook_pgapi_gw
 */

function pg_account_pgapi_gw($op,$a3=NULL,$a4=NULL){
  global $user;
  switch($op){
    case 'display name':
        $ret = t('Payment from Account balance');
      break;
    case 'payment page':
        $ret = url('payment/pgaccount/'.$a3 ,array('absolute' => TRUE));
      break;
    case 'payment gateway info':
        $balance=pg_account_balance_load($user->uid);
        $ret = FALSE;

        if($a4->service != 'pg_account' && $balance->balance  >= $a3) {
          $ret['name'] = theme('image', array( 'path' => drupal_get_path('module','pg_account').'/pg_account.png', 'alt' => t('Balance'), 'title' => t('Balance')));
          $format = variable_get('pgapi_currency', array());
          $ret['price']= array( $format['symbol'] => $a3 );
        }
      break;
    case 'process form':
        $form_result = $a4;
        $t = $a3;
        $t->method='pg_account';
        $balance=pg_account_balance_load($t->uid);
        
        $data = (object)(NULL);
        $data->amount=$t->amount * pg_account_getCurrentRate();
        $data->method=$t->type;
        $data->uid=$t->uid;
        $data->pgapi_txnid=$t->txnid;
        $data->description=$t->description;
        
        if(pg_account_balance_sub($data)){
          $t->status = pgapi_get_status_id('completed');
          pgapi_transaction_save($t);
          return $t;
        }else{
          $t->status = pgapi_get_status_id('failed');
          pgapi_transaction_save($t);
          return $t;
        
        }
        
      break;  
    case 'ajax_form':
        $t=$a3;
        return array(
          'element' => array (
            'message' => array(
              '#markup' => t('We will charge !amount from your balance', array ('!amount' => pgapi_format_price_plain($t->amount))),
            ),
          ),
          'submit' => 'pg_account_submit',
        );
      break;
  }
  return $ret;
}

function pg_account_submit($form,$form_state){
  $values = $form_state['values'];
  $transaction = pgapi_transaction_load($values['txnid']);
  $transaction->gateway = 'pg_account';
  
  $balance = pg_account_balance_load($transaction->uid);
        
  $data = new stdClass();
  $data->amount = $transaction->amount;
  $data->uid = $transaction->uid;
//  $data->pgapi_txnid = $t->txnid;
  if(pg_account_balance_sub($data)){
    $transaction->status = pgapi_get_status_id('completed');
    pgapi_transaction_save($transaction);
    
    $taccount = new stdClass();
    $taccount->amount = (0 - $transaction->amount);
    $taccount->operation = PG_ACCOUNT_SUB_BALANCE;
    $taccount->uid = $transaction->uid;
    $taccount->pgapi_txnid = $transaction->txnid;
    pg_account_transaction_save($taccount);
    
  }else{
    $transaction->status = pgapi_get_status_id('failed');
    pgapi_transaction_save($transaction);
  }    
}

/*
 * Implemets hook_pgapi_transaction
 */
function pg_account_pgapi_transaction($op, $t, $target = NULL){
  if($t->service == 'pg_account' && $target == 'service'){
    global $user;
    $account = user_load($t->uid);
    
    $t_old = pgapi_transaction_load($t->txnid);
  	$balance = pg_account_balance_load($t->uid);
    	
    $tokens['username'] = $account->name;
    $tokens['operatorname'] = $user->name;
    $tokens['description'] = $t->description;
    $tokens['amount'] = pgapi_format_price_plain($t->amount);
    
    $balance=pg_account_balance_load($account->uid);
    $tokens['balance'] = pgapi_format_price_plain($balance->balance);

    switch($op){
      case PG_COMPLETED:
        if($t_old->status != PG_COMPLETED){
          //send notice
          $data = new stdClass();
          $data->amount = $t->amount;
          $data->uid = $account->uid;

          if(pg_account_balance_add($data)){
            $notice = new stdClass();
            $notice->uid = $account->uid;
            $notice->provider = 'pg_account'; 
            if($user->uid != 0 ){
              $tokens['description'] = t('Transaction completed by operation !username.', array('!username' => $user->name)) . "\n" . $tokens['description'];
            }
            $message = t(variable_get('pg_account_user_message_add_body',PG_ACCOUNT_ADD_BALANCE_USER_MESSAGE));
            
            $notice->message = token_replace($message, array('pg_account' => $tokens));
  
            $subject = t(variable_get('pg_account_user_title_add',PG_ACCOUNT_ADD_BALANCE_USER_TITLE));
            
            $notice->subject = token_replace($subject, array('pg_account' => $tokens));
  
            $notice->format = variable_get('pg_account_user_message_add_format','filtered_html');
            notices_save($notice);
          }
        }
        break;
      case PG_PENDING:
      case PG_FAILED:
      case PG_DENIED:
      case PG_REFUNDED:
      case PG_RECEIVED:
      case PG_CANCELED:
        if($t_old->status == PG_COMPLETED){
          $data = (object)(NULL);
          $data->amount = $t->amount;
          $data->uid = $account->uid;

          if(pg_account_balance_sub($data)){
          
            //send notice
            $notice = new stdClass();
            $notice->uid = $account->uid;
            $notice->provider = 'pg_account'; 
            
            if($user->uid != 0 ){
              $tokens['description'] = t('Cancelling transaction by operation !username.', array('!username' => $user->name)) . "\n" . $tokens['description'];
            }          
            $message = t(variable_get('pg_account_user_message_sub_body',PG_ACCOUNT_SUB_BALANCE_USER_MESSAGE));
            
            $notice->message = token_replace($message, array('pg_account' => $tokens));
  
            $subject = t(variable_get('pg_account_user_title_sub',PG_ACCOUNT_SUB_BALANCE_USER_TITLE));
            
            $notice->subject = token_replace($subject, array('pg_account' => $tokens));
  
            $notice->format = variable_get('pg_account_user_message_sub_format','filtered_html');
            notices_save($notice);
          }
        }
        break;
        
    }	
  }//if
}

function pg_account_pgapi_callback($t){
  switch($t->status){
    case PG_COMPLETED:
        return 'pgaccount/complete/'.$t->txnid;
    case PG_PENDING:
        return 'pgaccount/pending/'.$t->txnid;     
    default:
        return 'pgaccount/fail/'.$t->txnid;

      break;
  }
}

/*
 * API
 */

function pg_account_transaction_load($txnid) {
  $transaction = db_query("SELECT * FROM {pg_account_transaction} WHERE txnid = :txnid", array ( ':txnid' => $txnid))->fetchObject;
  return $transaction;
}

function pg_account_transaction_save(&$t) {
  
  if(isset($t->txnid)){
    drupal_write_record('pg_account_transaction', $t,'txnid');
  }else{
    drupal_write_record('pg_account_transaction', $t);
  }
  
}

function pg_account_balance_add($data) {
  
  if($data->amount < 0){
    //amount needs to be positive
    return false;
  }
  $b = pg_account_balance_load($data->uid);
  
  if(isset($b->norecord)){
    $b->balance = $data->amount;
    $b->uid = $data->uid;
    drupal_write_record('pg_account_balance', $b);
  }else{
    $b->balance = $b->balance + $data->amount;
    drupal_write_record('pg_account_balance', $b, 'uid');
  }
  
  module_invoke_all('pgaccount_balance', 'add',$data);
  
  return true;

}

function pg_account_balance_sub($values) {
  $values=(object)$values;
  
  $sub=abs($values->amount);
  $b=pg_account_balance_load($values->uid);
  
  if($b->balance >=$sub) {

    $b->balance = $b->balance - $sub;
    
    drupal_write_record('pg_account_balance', $b, 'uid');
    
	  module_invoke_all('pgaccount_balance', 'sub',$b);

    return true;
    
  } 
  
  return false;
}
 

function pg_account_balance_load($uid) {
  $balance = db_query("SELECT * FROM {pg_account_balance} WHERE uid = :uid ", array(':uid' =>  $uid))->fetchObject();
  if(empty($balance)){
    $balance = new stdClass();
    $balance->uid=$uid;
    $balance->balance = 0;
    $balance->norecord =true;
  }
  return $balance;
}

function pg_account_process_oldtransaction($uid=0){
  if($uid==0){
    $transactions = db_query('SELECT * FROM {pg_account_transaction} WHERE status = :status', array( ':status' => PG_PENDING))->fetchAll();
  }else{
    $transactions = db_query('SELECT * FROM {pg_account_transaction} WHERE status = %d AND uid = :uid', array( ':status' => PG_PENDING, ':uid' => $uid))->fetchAll();
  }
  foreach($transactions as $t){

    //cancel orders with no payment more that 7 days
    $remove=86400*7;
    if( $t->status == PG_PENDING && $t->created < time()-$remove){
      $t->status = PG_CANCELED;
      $t->status = pgapi_get_status_id('canceled');
      $t->workflow = pgapi_get_workflow_id('canceled');
      $t->description = t('Transaction marked canceled due no payment for more than 7 days');
      pg_account_transaction_save($t);
    }
  } 
}